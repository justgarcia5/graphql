"use strict";function e(){const e={};return e.promise=new Promise((r,t)=>{e.resolve=r,e.reject=t}),e}const r=Symbol(),t=Symbol();function o(){var o,n;let l=!0;const s=[];let u=e(),a=e();const c=async function*(){for(;;)if(s.length>0)yield s.shift();else if(await Promise.race([u.promise,a.promise])===r)break}(),i=null==(o=c.return)?void 0:o.bind(c);c.return=(...e)=>{var t;return l=!1,a.resolve(r),null!=(t=null==i?void 0:i(...e))?t:Promise.resolve({done:!0,value:void 0})};const y=null==(n=c.throw)?void 0:n.bind(c);return c.throw=(...e)=>{var t;return l=!1,a.resolve(r),null!=(t=null==y?void 0:y(...e))?t:Promise.resolve({done:!0,value:void 0})},{pushValue:function(r){!1!==l&&(s.push(r),u.resolve(t),u=e())},asyncIterableIterator:c}}exports.applyAsyncIterableIteratorToSink=function(e,r){return(async()=>{try{for await(const t of e)r.next(t);r.complete()}catch(e){r.error(e)}})(),()=>{null==e.return||e.return()}},exports.isAsyncIterable=function(e){return"object"==typeof e&&null!==e&&("AsyncGenerator"===e[Symbol.toStringTag]||Symbol.asyncIterator&&Symbol.asyncIterator in e)},exports.makeAsyncIterableIteratorFromSink=e=>{const{pushValue:r,asyncIterableIterator:t}=o();let n=()=>{};const l={next:e=>{r(e)},complete:()=>{n(),null==t.return||t.return()},error:e=>{null==t.throw||t.throw(e)}};return n=e(l),t},exports.makePushPullAsyncIterableIterator=o;
//# sourceMappingURL=push-pull-async-iterable-iterator.cjs.production.min.js.map
