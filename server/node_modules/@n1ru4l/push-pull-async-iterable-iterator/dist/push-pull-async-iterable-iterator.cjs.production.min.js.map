{"version":3,"file":"push-pull-async-iterable-iterator.cjs.production.min.js","sources":["../src/makePushPullAsyncIterableIterator.ts","../src/applyAsyncIterableIteratorToSink.ts","../src/isAsyncIterable.ts","../src/makeAsyncIterableIteratorFromSink.ts"],"sourcesContent":["type Deferred<T> = {\n  resolve: (value: T) => void;\n  reject: (value: unknown) => void;\n  promise: Promise<T>;\n};\n\nfunction createDeferred<T>(): Deferred<T> {\n  const d = {} as Deferred<T>;\n  d.promise = new Promise<T>((resolve, reject) => {\n    d.resolve = resolve;\n    d.reject = reject;\n  });\n  return d;\n}\n\nexport type PushPullAsyncIterableIterator<T> = {\n  /* Push a new value that will be published on the AsyncIterableIterator. */\n  pushValue: (value: T) => void;\n  /* AsyncIterableIterator that publishes the values pushed on the stack with pushValue. */\n  asyncIterableIterator: AsyncIterableIterator<T>;\n};\n\nconst SYMBOL_FINISHED = Symbol();\nconst SYMBOL_NEW_VALUE = Symbol();\n\n/**\n * makePushPullAsyncIterableIterator\n *\n * The iterable will publish values until return or throw is called.\n * Afterwards it is in the completed state and cannot be used for publishing any further values.\n * It will handle back-pressure and keep pushed values until they are consumed by a source.\n */\nexport function makePushPullAsyncIterableIterator<\n  T\n>(): PushPullAsyncIterableIterator<T> {\n  let isRunning = true;\n  const values: Array<T> = [];\n\n  let newValueD = createDeferred<typeof SYMBOL_NEW_VALUE>();\n  let finishedD = createDeferred<typeof SYMBOL_FINISHED>();\n\n  const asyncIterableIterator = (async function* PushPullAsyncIterableIterator(): AsyncIterableIterator<\n    T\n  > {\n    while (true) {\n      if (values.length > 0) {\n        yield values.shift()!;\n      } else {\n        const result = await Promise.race([\n          newValueD.promise,\n          finishedD.promise\n        ]);\n\n        if (result === SYMBOL_FINISHED) {\n          break;\n        }\n      }\n    }\n  })();\n\n  function pushValue(value: T) {\n    if (isRunning === false) {\n      // TODO: Should this throw?\n      return;\n    }\n\n    values.push(value);\n    newValueD.resolve(SYMBOL_NEW_VALUE);\n    newValueD = createDeferred();\n  }\n\n  // We monkey patch the original generator for clean-up\n  const originalReturn = asyncIterableIterator[\"return\"]?.bind(\n    asyncIterableIterator\n  );\n  asyncIterableIterator[\"return\"] = (\n    ...args\n  ): Promise<IteratorResult<T, void>> => {\n    isRunning = false;\n    finishedD.resolve(SYMBOL_FINISHED);\n    return (\n      originalReturn?.(...args) ??\n      Promise.resolve({ done: true, value: undefined })\n    );\n  };\n  const originalThrow = asyncIterableIterator[\"throw\"]?.bind(\n    asyncIterableIterator\n  );\n  asyncIterableIterator[\"throw\"] = (\n    ...args\n  ): Promise<IteratorResult<T, void>> => {\n    isRunning = false;\n    finishedD.resolve(SYMBOL_FINISHED);\n    return (\n      originalThrow?.(...args) ??\n      Promise.resolve({ done: true, value: undefined })\n    );\n  };\n\n  return {\n    pushValue,\n    asyncIterableIterator\n  };\n}\n","import { Sink } from \"./Sink\";\n\nexport function applyAsyncIterableIteratorToSink<\n  TValue = unknown,\n  TError = unknown\n>(\n  asyncIterableIterator: AsyncIterableIterator<TValue>,\n  sink: Sink<TValue, TError>\n): () => void {\n  const run = async () => {\n    try {\n      for await (const value of asyncIterableIterator) {\n        sink.next(value);\n      }\n      sink.complete();\n    } catch (err) {\n      sink.error(err);\n    }\n  };\n  run();\n\n  return () => {\n    asyncIterableIterator.return?.();\n  };\n}\n","export function isAsyncIterable(\n  input: unknown\n): input is AsyncIterator<unknown> | AsyncIterableIterator<unknown> {\n  return (\n    typeof input === \"object\" &&\n    input !== null &&\n    // The AsyncGenerator check is for Safari on iOS which currently does not have\n    // Symbol.asyncIterator implemented\n    // That means every custom AsyncIterable must be built using a AsyncGeneratorFunction (async function * () {})\n    ((input as any)[Symbol.toStringTag] === \"AsyncGenerator\" ||\n      (Symbol.asyncIterator && Symbol.asyncIterator in input))\n  );\n}\n","import { makePushPullAsyncIterableIterator } from \"./makePushPullAsyncIterableIterator\";\nimport { Sink } from \"./Sink\";\n\nexport const makeAsyncIterableIteratorFromSink = <\n  TValue = unknown,\n  TError = unknown\n>(\n  make: (sink: Sink<TValue, TError>) => () => void\n): AsyncIterableIterator<TValue> => {\n  const {\n    pushValue,\n    asyncIterableIterator\n  } = makePushPullAsyncIterableIterator<TValue>();\n  let dispose: () => void = () => undefined;\n\n  const sink: Sink<TValue, TError> = {\n    next: (value: TValue) => {\n      pushValue(value);\n    },\n    complete: () => {\n      dispose();\n      asyncIterableIterator.return?.();\n    },\n    error: (err: TError) => {\n      asyncIterableIterator.throw?.(err);\n    }\n  };\n\n  dispose = make(sink);\n  return asyncIterableIterator;\n};\n"],"names":["createDeferred","d","promise","Promise","resolve","reject","SYMBOL_FINISHED","Symbol","SYMBOL_NEW_VALUE","makePushPullAsyncIterableIterator","isRunning","values","newValueD","finishedD","asyncIterableIterator","async","length","shift","race","originalReturn","_asyncIterableIterato","bind","args","done","value","undefined","originalThrow","_asyncIterableIterato2","pushValue","push","sink","next","complete","err","error","run","return","input","toStringTag","asyncIterator","make","dispose","throw"],"mappings":"aAMA,SAASA,UACDC,EAAI,UACVA,EAAEC,QAAU,IAAIC,QAAW,CAACC,EAASC,KACnCJ,EAAEG,QAAUA,EACZH,EAAEI,OAASA,IAENJ,EAUT,MAAMK,EAAkBC,SAClBC,EAAmBD,kBASTE,gBAGVC,GAAY,QACVC,EAAmB,OAErBC,EAAYZ,IACZa,EAAYb,UAEVc,EAAyBC,4BAIvBJ,EAAOK,OAAS,QACZL,EAAOM,sBAEQd,QAAQe,KAAK,CAChCN,EAAUV,QACVW,EAAUX,YAGGI,QAZUS,GA+BzBI,WAAiBL,EAAqB,eAArBM,EAAiCC,KACtDP,GAEFA,EAAqB,OAAa,IAC7BQ,kBAEHZ,GAAY,EACZG,EAAUT,QAAQE,kBAEhBa,SAAAA,KAAoBG,MACpBnB,QAAQC,QAAQ,CAAEmB,MAAM,EAAMC,WAAOC,WAGnCC,WAAgBZ,EAAqB,cAArBa,EAAgCN,KACpDP,UAEFA,EAAqB,MAAY,IAC5BQ,kBAEHZ,GAAY,EACZG,EAAUT,QAAQE,kBAEhBoB,SAAAA,KAAmBJ,MACnBnB,QAAQC,QAAQ,CAAEmB,MAAM,EAAMC,WAAOC,KAIlC,CACLG,mBAxCiBJ,IACC,IAAdd,IAKJC,EAAOkB,KAAKL,GACZZ,EAAUR,QAAQI,GAClBI,EAAYZ,MAiCZc,sBAAAA,qDC/FFA,EACAgB,SAEYf,yBAEG,MAAMS,KAASV,EACxBgB,EAAKC,KAAKP,GAEZM,EAAKE,WACL,MAAOC,GACPH,EAAKI,MAAMD,KAGfE,GAEO,WACLrB,EAAsBsB,QAAtBtB,EAAsBsB,4CCrBxBC,SAGmB,iBAAVA,GACG,OAAVA,IAIwC,mBAAtCA,EAAc9B,OAAO+B,cACpB/B,OAAOgC,eAAiBhC,OAAOgC,iBAAiBF,8CCHrDG,UAEMZ,UACJA,EADId,sBAEJA,GACEL,QACAgC,EAAsB,aAEpBX,EAA6B,CACjCC,KAAOP,IACLI,EAAUJ,IAEZQ,SAAU,KACRS,UACA3B,EAAsBsB,QAAtBtB,EAAsBsB,UAExBF,MAAQD,UACNnB,EAAsB4B,OAAtB5B,EAAsB4B,MAAQT,YAIlCQ,EAAUD,EAAKV,GACRhB"}